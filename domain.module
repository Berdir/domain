<?php

/**
 * @file
 * Defines a Domain concept for use with Drupal.
 */

use Drupal\domain\Plugin\Core\Entity\Domain;

/**
 * Implements hook_permission().
 */
function domain_permission() {
  $permissions = array(
    'administer domains' => array(
      'title' => t('Administer all domain records'),
    ),
    'create domains' => array(
      'title' => t('Create domain records'),
    ),
    'edit assigned domains' => array(
      'title' => t('Edit assigned domain records'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function domain_menu() {
  $items['admin/structure/domain'] = array(
    'title' => 'Domains',
    'description' => 'Manage domain records for your installation.',
    'page callback' => 'domain_overview',
    // @TODO custom callback for per-domain access.
    'access arguments' => array('administer domains'),
    'file' => 'domain.admin.inc',
  );
  $items['admin/structure/domain/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/domain/add'] = array(
    'title' => 'Add domain',
    'page callback' => 'domain_add',
    'access callback' => 'domain_create_access',
    'access arguments' => array(),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'domain.admin.inc',
  );
  $items['admin/structure/domain/%domain_machine_name'] = array(
    'title' => 'Domain',
    'page callback' => 'domain_edit',
    'page arguments' => array(3),
    'access callback' => 'domain_edit_access',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'domain.admin.inc',
  );
  $items['admin/structure/domain/%domain_machine_name/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/domain/%domain_machine_name/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'domain_delete',
    'page arguments' => array(3),
    'access callback' => 'domain_edit_access',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'domain.admin.inc',
  );
  $items['admin/structure/domain/%domain_machine_name/default'] = array(
    'title' => 'Make default',
    'page callback' => 'domain_admin_callback',
    'page arguments' => array(3, 4),
    'access callback' => 'domain_edit_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'domain.admin.inc',
  );
  $items['admin/structure/domain/%domain_machine_name/enable'] = array(
    'title' => 'Enable',
    'page callback' => 'domain_admin_callback',
    'page arguments' => array(3, 4),
    'access callback' => 'domain_edit_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'domain.admin.inc',
  );
  $items['admin/structure/domain/%domain_machine_name/disable'] = array(
    'title' => 'Disable',
    'page callback' => 'domain_admin_callback',
    'page arguments' => array(3, 4),
    'access callback' => 'domain_edit_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'domain.admin.inc',
  );

  return $items;
}

/**
 * Checks to see if a user may create a new domain record.
 */
function domain_create_access() {
  if (user_access('administer domains') || user_access('create domains')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Checks to see if a user may edit an existing domain record.
 */
function domain_edit_access() {
  // @TODO conditional check in the second permission.
  if (user_access('administer domains') || user_access('edit assigned domains')) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Returns the id of the default domain.
 *
 * @return
 *   The domain_id of the default domain or FALSE if none is set.
 */
function domain_default_id() {
  $result = entity_load_multiple_by_properties('domain', array('is_default' => 1));
  if (!empty($result)) {
    return key($result);
  }
  return FALSE;
}

/**
 * Loads multiple domain records.
 *
 * @param array $domain_ids
 *   (optional) An array of entity IDs. If omitted, all entities are loaded.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache.  Defaults to FALSE.
 *
 * @return array
 *   An array of domain entities indexed by domain_id.
 */
function domain_load_multiple(array $domain_ids = NULL, $reset = FALSE) {
  return entity_load_multiple('domain', $domain_ids, $reset);
}

/**
 * Return the domain entity matching a domain id.
 *
 * @param $domain_id
 *   The domain id.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache. Defaults to FALSE.
 *
 * @return Drupal\domain\Plugin\Core\Entity\Domain|FALSE
 *   The domain entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function domain_load($domain_id = NULL, $reset = FALSE) {
  return entity_load('domain', $domain_id, $reset);
}

/**
 * Return the domain entity matching a domain machine name.
 *
 * @param $machine_name
 *   The domain's machine name.
 *
 * @return Drupal\domain\Plugin\Core\Entity\Domain|false
 *   The domain entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function domain_machine_name_load($machine_name) {
  $result = entity_load_multiple_by_properties('domain', array('machine_name' => $machine_name));
  return reset($result);
}

/**
 * Loads multiple domain records by machine name.
 *
 * @param array $machine_names
 *   (optional) An array of entity machine names. If omitted, all entities are loaded.
 * @param bool $reset
 *   (optional) Whether to reset the internal cache.  Defaults to FALSE.
 *
 * @return array
 *   An array of domain entities indexed by machine.
 */
function domain_machine_name_load_multiple(array $machine_names = NULL, $reset = FALSE) {
  $domains = array();
  if (!empty($machine_names)) {
    $result = entity_load_multiple_by_properties('domain', array('machine_name' => $machine_names));
  }
  else {
    $result = domain_load_multiple();
  }
  foreach ($result as $domain) {
    $domains[$domain->machine_name] = $domain;
  }
  return $domains;
}

/**
 * Saves a domain record.
 */
function domain_save(Domain $domain) {
  $domain->save();
}

/**
 * Creates a new Domain entity record with default values.
 *
 * @param $inherit
 *   Boolean flag indicating that the new domain should inherit values from the
 *   current $_SERVER request. Useful for creating domain records on install.
 *
 * @return Drupal\domain\Plugin\Core\Entity\Domain
 *   A domain entity, with preset values for the current environment.
 */
function domain_create($inherit = FALSE) {
  $default = domain_default_id();
  $domains = domain_load_multiple();
  $values = array(
    'scheme' => empty($GLOBALS['is_https']) ? 'http' : 'https',
    'status' => 1,
    'weight' => count($domains) + 1,
    'is_default' => (int) empty($default),
  );
  if ($inherit) {
    $values['hostname'] = $_SERVER['HTTP_HOST'];
    $values['name'] = variable_get('sitename', 'Drupal');
    $values['machine_name'] = domain_machine_name($values['hostname']);
  }
  $domain = entity_create('domain', $values);
  return $domain;
}

/**
 * Create a machine name for a domain record.
 *
 * @param $hostname
 *  The hostname string of the record, which should be unique.
 *
 * @return
 *  A string with dot and colon transformed to underscore.
 */
function domain_machine_name($hostname) {
  return preg_replace('/[^a-z0-9_]+/', '_', $hostname);
}

/**
 * Returns an array of required fields for a domain record.
 *
 * @return array
 *   An array of required field keys.
 */
function domain_required_fields() {
  return array('hostname', 'name', 'machine_name', 'scheme', 'status', 'weight');
}

function domain_get_uri(Domain $domain) {
  return 'foo';
}

function domain_get_domain() {
  $active = domain_create(TRUE);
  return $active;
}
